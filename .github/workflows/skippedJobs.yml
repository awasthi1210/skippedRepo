name: Skipped Jobs Workflow

on:
  push:
    branches: ['main']
  workflow_dispatch:

jobs:
  job1:
    name: Job 1
    runs-on: ubuntu-latest
    steps:
      - name: Step 1 in Job 1
        run: echo "Running Job 1"

  # Parallel Skipped Jobs
  job2:
    name: Job 2 (Always Skipped)
    runs-on: ubuntu-latest
    if: false  # This ensures the job is always skipped
    needs: job1
    steps:
      - name: Step 1 in Job 2
        run: echo "This should not run"

  job3:
    name: Job 3 (Always Skipped)
    runs-on: ubuntu-latest
    if: false  # This ensures the job is always skipped
    needs: job2
    steps:
      - name: Step 1 in Job 3
        run: echo "This should not run"

  # job4:
  #   name: Job 4
  #   runs-on: ubuntu-latest
  #   needs: job2  # Job 4 depends on Job 2 and Job 3, running them in parallel
  #   if: ${{ always() }}  # Ensures that job4 runs no matter what happens with job2 and job3
  #   steps:
  #     - name: Step 1 in Job 4 - Waiting for 30 seconds
  #       run: echo "Waiting for 30 seconds..." && sleep 60
  #     - name: Step 2 in Job 4 - Always Fail
  #       run: |
  #         echo "This job is forced to fail."
  #         exit 1  # Force the job to fail every time
      
  ChangeRequest:
     name: Change Request
     if: always()
     needs: job3
     runs-on: ubuntu-latest
     steps:     
      - name: ServiceNow DevOps Change Attributes
        uses: ServiceNow/servicenow-devops-change@dev
        with:
          # devops-integration-user-name: ${{ secrets.SN_DEVOPS_USER }}
          # devops-integration-user-password: ${{ secrets.SN_DEVOPS_PASSWORD }}
          devops-integration-token: ${{ secrets.SN_DEVOPS_TOKEN }}
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          job-name: 'Change Request'
          change-request: '{"autoCloseChange":true,"attributes":{"chg_model": {"name": "Normal" },"short_description":"Automated Software Deployments","description":"Automated Software Deployment.","assignment_group":"a715cd759f2002002920bde8132e7018","implementation_plan":"Software update is tested and results can be found in Test Summaries Tab.","backout_plan":"When software fails in production, the previous software release will be re-deployed.","test_plan":"Testing if the software was successfully deployed."}}'  
          interval: '100'
          timeout: '3600'
          # changeCreationTimeOut: ;'1000'
          # deployment-gate: '{"environment":"prod","jobName":"Deploy"}'

  # More Parallel Skipped Jobs
  job5:
    name: Job 5 (Always Skipped)
    runs-on: ubuntu-latest
    if: false  # This ensures the job is always skipped
    needs: ChangeRequest
    steps:
      - name: Step 1 in Job 5
        run: echo "This should not run"

  job6:
    name: Job 6 (Always Skipped)
    runs-on: ubuntu-latest
    if: false  # This ensures the job is always skipped
    needs: job5
    steps:
      - name: Step 1 in Job 6
        run: echo "This should not run"

  # Sequential Skipped Jobs
  job7:
    name: Job 7 (Always Skipped)
    runs-on: ubuntu-latest
    if: false  # This ensures the job is always skipped
    needs: job6  # Job 7 depends on job5 and job6
    steps:
      - name: Step 1 in Job 7
        run: echo "This should not run"

  job8:
    name: Job 8 (Always Skipped)
    runs-on: ubuntu-latest
    if: false  # This ensures the job is always skipped
    needs: job7  # Job 8 depends on job7
    steps:
      - name: Step 1 in Job 8
        run: echo "This should not run"

  # More Parallel Skipped Jobs
  job9:
    name: Job 9 (Always Skipped)
    runs-on: ubuntu-latest
    if: false  # This ensures the job is always skipped
    needs: job8
    steps:
      - name: Step 1 in Job 9
        run: echo "This should not run"

  job10:
    name: Job 10 (Always Skipped)
    runs-on: ubuntu-latest
    if: false  # This ensures the job is always skipped
    needs: job9
    steps:
      - name: Step 1 in Job 10
        run: echo "This should not run"

  # Sequential Jobs
  job11:
    name: Job 11
    runs-on: ubuntu-latest
    needs: job10  # Job 11 depends on job9 and job10
    steps:
      - name: Step 1 in Job 11
        run: echo "Running Job 11 after job9 and job10"

  job12:
    name: Job 12
    runs-on: ubuntu-latest
    needs: job11
    # if: ${{ cancelled() }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run conditional step
        if: ${{ env.MY_VARIABLE == false }}  # Will run only if MY_VARIABLE is 'false'
        run: |
          echo "This step runs only if MY_VARIABLE is false"
